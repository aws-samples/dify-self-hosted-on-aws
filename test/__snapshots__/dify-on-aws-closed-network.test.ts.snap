// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snapshot test 1`] = `
{
  "Description": "Dify on AWS (uksb-zea0rh9k0v)",
  "Outputs": {
    "ConsoleConnectToTaskCommand": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "aws ecs execute-command --region us-west-2 --cluster ",
            {
              "Ref": "ClusterEB0386A7",
            },
            " --container Main --interactive --command "bash" --task TASK_ID",
          ],
        ],
      },
    },
    "ConsoleListTasksCommand": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "aws ecs list-tasks --region us-west-2 --cluster ",
            {
              "Ref": "ClusterEB0386A7",
            },
            " --service-name ",
            {
              "Fn::GetAtt": [
                "ApiServiceFargateServiceE4EA9E4E",
                "Name",
              ],
            },
            " --desired-status RUNNING",
          ],
        ],
      },
    },
    "DifyUrl": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "AlbC1372A32",
                "DNSName",
              ],
            },
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "AWS679f53fac002430cb0da5b7982bd22872D164C4C": {
      "DependsOn": [
        "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleDefaultPolicyD28E1A5E",
        "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-123456789012-us-west-2",
          "S3Key": "4cd2f2411231aa073e609dc99a49b5c5e974252bf9abf0f9350d237d17cce8be.zip",
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 120,
      },
      "Type": "AWS::Lambda::Function",
    },
    "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleDefaultPolicyD28E1A5E": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
              },
            },
            {
              "Action": [
                "rds-data:BatchExecuteStatement",
                "rds-data:BeginTransaction",
                "rds-data:CommitTransaction",
                "rds-data:ExecuteStatement",
                "rds-data:RollbackTransaction",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds:us-west-2:123456789012:cluster:",
                    {
                      "Ref": "PostgresCluster53E5BDAB",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleDefaultPolicyD28E1A5E",
        "Roles": [
          {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "AccessLogBucketAutoDeleteObjectsCustomResource01AB31E8": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "AccessLogBucketPolicyF52D2D01",
      ],
      "Properties": {
        "BucketName": {
          "Ref": "AccessLogBucketDA470295",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3AutoDeleteObjects",
      "UpdateReplacePolicy": "Delete",
    },
    "AccessLogBucketDA470295": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "OwnershipControls": {
          "Rules": [
            {
              "ObjectOwnership": "ObjectWriter",
            },
          ],
        },
        "Tags": [
          {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true",
          },
        ],
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "AccessLogBucketPolicyF52D2D01": {
      "Properties": {
        "Bucket": {
          "Ref": "AccessLogBucketDA470295",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "AccessLogBucketDA470295",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "AccessLogBucketDA470295",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "s3:PutBucketPolicy",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn",
                  ],
                },
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "AccessLogBucketDA470295",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "AccessLogBucketDA470295",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "s3:PutObject",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::797873946194:root",
                    ],
                  ],
                },
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "AccessLogBucketDA470295",
                        "Arn",
                      ],
                    },
                    "/dify-alb/AWSLogs/123456789012/*",
                  ],
                ],
              },
            },
            {
              "Action": "s3:PutObject",
              "Condition": {
                "StringEquals": {
                  "s3:x-amz-acl": "bucket-owner-full-control",
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "delivery.logs.amazonaws.com",
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "AccessLogBucketDA470295",
                        "Arn",
                      ],
                    },
                    "/dify-alb/AWSLogs/123456789012/*",
                  ],
                ],
              },
            },
            {
              "Action": "s3:GetBucketAcl",
              "Effect": "Allow",
              "Principal": {
                "Service": "delivery.logs.amazonaws.com",
              },
              "Resource": {
                "Fn::GetAtt": [
                  "AccessLogBucketDA470295",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "AlbApiTargetGroup4B6AF19C": {
      "Properties": {
        "HealthCheckIntervalSeconds": 30,
        "HealthCheckPath": "/health",
        "HealthyThresholdCount": 2,
        "Matcher": {
          "HttpCode": "200-299,307",
        },
        "Port": 5001,
        "Protocol": "HTTP",
        "TargetGroupAttributes": [
          {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "10",
          },
          {
            "Key": "stickiness.enabled",
            "Value": "false",
          },
        ],
        "TargetType": "ip",
        "UnhealthyThresholdCount": 10,
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
    "AlbC1372A32": {
      "DependsOn": [
        "AccessLogBucketPolicyF52D2D01",
      ],
      "Properties": {
        "LoadBalancerAttributes": [
          {
            "Key": "deletion_protection.enabled",
            "Value": "false",
          },
          {
            "Key": "access_logs.s3.enabled",
            "Value": "true",
          },
          {
            "Key": "access_logs.s3.bucket",
            "Value": {
              "Ref": "AccessLogBucketDA470295",
            },
          },
          {
            "Key": "access_logs.s3.prefix",
            "Value": "dify-alb",
          },
        ],
        "Scheme": "internal",
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "AlbSecurityGroup433229ED",
              "GroupId",
            ],
          },
        ],
        "Subnets": [
          {
            "Ref": "VpcIsolatedSubnet1SubnetE48C5737",
          },
          {
            "Ref": "VpcIsolatedSubnet2Subnet16364B91",
          },
        ],
        "Type": "application",
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
    },
    "AlbListener318AEEBA": {
      "Properties": {
        "DefaultActions": [
          {
            "FixedResponseConfig": {
              "StatusCode": "400",
            },
            "Type": "fixed-response",
          },
        ],
        "LoadBalancerArn": {
          "Ref": "AlbC1372A32",
        },
        "Port": 80,
        "Protocol": "HTTP",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "AlbListenerApi0Rule033B7A48": {
      "Properties": {
        "Actions": [
          {
            "TargetGroupArn": {
              "Ref": "AlbApiTargetGroup4B6AF19C",
            },
            "Type": "forward",
          },
        ],
        "Conditions": [
          {
            "Field": "path-pattern",
            "PathPatternConfig": {
              "Values": [
                "/console/api",
                "/api",
                "/v1",
                "/files",
                "/console/api/*",
              ],
            },
          },
        ],
        "ListenerArn": {
          "Ref": "AlbListener318AEEBA",
        },
        "Priority": 1,
      },
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
    },
    "AlbListenerApi1RuleDF535F10": {
      "Properties": {
        "Actions": [
          {
            "TargetGroupArn": {
              "Ref": "AlbApiTargetGroup4B6AF19C",
            },
            "Type": "forward",
          },
        ],
        "Conditions": [
          {
            "Field": "path-pattern",
            "PathPatternConfig": {
              "Values": [
                "/api/*",
                "/v1/*",
                "/files/*",
              ],
            },
          },
        ],
        "ListenerArn": {
          "Ref": "AlbListener318AEEBA",
        },
        "Priority": 2,
      },
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
    },
    "AlbListenerWeb0RuleE10BEE0F": {
      "Properties": {
        "Actions": [
          {
            "TargetGroupArn": {
              "Ref": "AlbWebTargetGroupC65B2BDF",
            },
            "Type": "forward",
          },
        ],
        "Conditions": [
          {
            "Field": "path-pattern",
            "PathPatternConfig": {
              "Values": [
                "/*",
              ],
            },
          },
        ],
        "ListenerArn": {
          "Ref": "AlbListener318AEEBA",
        },
        "Priority": 3,
      },
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
    },
    "AlbSecurityGroup433229ED": {
      "Properties": {
        "GroupDescription": "Automatically created Security Group for ELB TestStackAlb4BAF7F63",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "from 0.0.0.0/0:80",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80,
          },
          {
            "CidrIpv6": "::/0",
            "Description": "from ::/0:80",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80,
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "AlbSecurityGrouptoTestStackApiServiceFargateServiceSecurityGroup7DD0AF445001CF7EB3A2": {
      "Properties": {
        "Description": "Load balancer to target",
        "DestinationSecurityGroupId": {
          "Fn::GetAtt": [
            "ApiServiceFargateServiceSecurityGroupE31C96C6",
            "GroupId",
          ],
        },
        "FromPort": 5001,
        "GroupId": {
          "Fn::GetAtt": [
            "AlbSecurityGroup433229ED",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 5001,
      },
      "Type": "AWS::EC2::SecurityGroupEgress",
    },
    "AlbSecurityGrouptoTestStackWebServiceFargateServiceSecurityGroup424456D03000D480A23C": {
      "Properties": {
        "Description": "Load balancer to target",
        "DestinationSecurityGroupId": {
          "Fn::GetAtt": [
            "WebServiceFargateServiceSecurityGroup60FE78D6",
            "GroupId",
          ],
        },
        "FromPort": 3000,
        "GroupId": {
          "Fn::GetAtt": [
            "AlbSecurityGroup433229ED",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 3000,
      },
      "Type": "AWS::EC2::SecurityGroupEgress",
    },
    "AlbWebTargetGroupC65B2BDF": {
      "Properties": {
        "HealthCheckIntervalSeconds": 30,
        "HealthCheckPath": "/",
        "HealthyThresholdCount": 2,
        "Matcher": {
          "HttpCode": "200-299,307",
        },
        "Port": 3000,
        "Protocol": "HTTP",
        "TargetGroupAttributes": [
          {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "10",
          },
          {
            "Key": "stickiness.enabled",
            "Value": "false",
          },
        ],
        "TargetType": "ip",
        "UnhealthyThresholdCount": 10,
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
    "ApiServiceCreatePluginsPlaceholderCustomResourcePolicy2609A14C": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:PutObject",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "StorageBucket19DB2FF8",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "StorageBucket19DB2FF8",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiServiceCreatePluginsPlaceholderCustomResourcePolicy2609A14C",
        "Roles": [
          {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ApiServiceCreatePluginsPlaceholderE9D923F8": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "ApiServiceCreatePluginsPlaceholderCustomResourcePolicy2609A14C",
      ],
      "Properties": {
        "Create": {
          "Fn::Join": [
            "",
            [
              "{"service":"s3","action":"putObject","parameters":{"Bucket":"",
              {
                "Ref": "StorageBucket19DB2FF8",
              },
              "","Key":"plugins","Body":"placeholder. see https://github.com/langgenius/dify-plugin-daemon/issues/35"},"physicalResourceId":{"id":"id"}}",
            ],
          ],
        },
        "InstallLatestAwsSdk": true,
        "ServiceToken": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
            "Arn",
          ],
        },
        "Update": {
          "Fn::Join": [
            "",
            [
              "{"service":"s3","action":"putObject","parameters":{"Bucket":"",
              {
                "Ref": "StorageBucket19DB2FF8",
              },
              "","Key":"plugins","Body":"placeholder. see https://github.com/langgenius/dify-plugin-daemon/issues/35"},"physicalResourceId":{"id":"id"}}",
            ],
          ],
        },
      },
      "Type": "Custom::AWS",
      "UpdateReplacePolicy": "Delete",
    },
    "ApiServiceEncryptionSecretF73F9ECD": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "GenerateSecretString": {
          "PasswordLength": 42,
        },
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "ApiServiceFargateServiceE4EA9E4E": {
      "DependsOn": [
        "AlbListenerApi0Rule033B7A48",
        "AlbListenerApi1RuleDF535F10",
        "ApiServiceTaskTaskRoleDefaultPolicy982AD2DC",
        "ApiServiceTaskTaskRole06F87EBE",
      ],
      "Properties": {
        "CapacityProviderStrategy": [
          {
            "CapacityProvider": "FARGATE",
            "Weight": 1,
          },
          {
            "CapacityProvider": "FARGATE_SPOT",
            "Weight": 0,
          },
        ],
        "Cluster": {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": {
          "Alarms": {
            "AlarmNames": [],
            "Enable": false,
            "Rollback": false,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 100,
        },
        "EnableECSManagedTags": false,
        "EnableExecuteCommand": true,
        "HealthCheckGracePeriodSeconds": 60,
        "LoadBalancers": [
          {
            "ContainerName": "Main",
            "ContainerPort": 5001,
            "TargetGroupArn": {
              "Ref": "AlbApiTargetGroup4B6AF19C",
            },
          },
        ],
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": [
              {
                "Fn::GetAtt": [
                  "ApiServiceFargateServiceSecurityGroupE31C96C6",
                  "GroupId",
                ],
              },
            ],
            "Subnets": [
              {
                "Ref": "VpcIsolatedSubnet1SubnetE48C5737",
              },
              {
                "Ref": "VpcIsolatedSubnet2Subnet16364B91",
              },
            ],
          },
        },
        "TaskDefinition": {
          "Ref": "ApiServiceTask878B1807",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "ApiServiceFargateServiceSecurityGroupE31C96C6": {
      "DependsOn": [
        "ApiServiceTaskTaskRoleDefaultPolicy982AD2DC",
        "ApiServiceTaskTaskRole06F87EBE",
      ],
      "Properties": {
        "GroupDescription": "TestStack/ApiService/FargateService/SecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ApiServiceFargateServiceSecurityGroupfromTestStackAlbSecurityGroup8A47F1DC5001CFAD1D48": {
      "DependsOn": [
        "ApiServiceTaskTaskRoleDefaultPolicy982AD2DC",
        "ApiServiceTaskTaskRole06F87EBE",
      ],
      "Properties": {
        "Description": "Load balancer to target",
        "FromPort": 5001,
        "GroupId": {
          "Fn::GetAtt": [
            "ApiServiceFargateServiceSecurityGroupE31C96C6",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "AlbSecurityGroup433229ED",
            "GroupId",
          ],
        },
        "ToPort": 5001,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "ApiServiceTask878B1807": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Environment": [
              {
                "Name": "MODE",
                "Value": "api",
              },
              {
                "Name": "LOG_LEVEL",
                "Value": "ERROR",
              },
              {
                "Name": "DEBUG",
                "Value": "false",
              },
              {
                "Name": "CONSOLE_WEB_URL",
                "Value": {
                  "Fn::Join": [
                    "",
                    [
                      "http://",
                      {
                        "Fn::GetAtt": [
                          "AlbC1372A32",
                          "DNSName",
                        ],
                      },
                    ],
                  ],
                },
              },
              {
                "Name": "CONSOLE_API_URL",
                "Value": {
                  "Fn::Join": [
                    "",
                    [
                      "http://",
                      {
                        "Fn::GetAtt": [
                          "AlbC1372A32",
                          "DNSName",
                        ],
                      },
                    ],
                  ],
                },
              },
              {
                "Name": "SERVICE_API_URL",
                "Value": {
                  "Fn::Join": [
                    "",
                    [
                      "http://",
                      {
                        "Fn::GetAtt": [
                          "AlbC1372A32",
                          "DNSName",
                        ],
                      },
                    ],
                  ],
                },
              },
              {
                "Name": "APP_WEB_URL",
                "Value": {
                  "Fn::Join": [
                    "",
                    [
                      "http://",
                      {
                        "Fn::GetAtt": [
                          "AlbC1372A32",
                          "DNSName",
                        ],
                      },
                    ],
                  ],
                },
              },
              {
                "Name": "SQLALCHEMY_POOL_PRE_PING",
                "Value": "True",
              },
              {
                "Name": "REDIS_HOST",
                "Value": {
                  "Fn::GetAtt": [
                    "RedisFF642DF2",
                    "PrimaryEndPoint.Address",
                  ],
                },
              },
              {
                "Name": "REDIS_PORT",
                "Value": "6379",
              },
              {
                "Name": "REDIS_USE_SSL",
                "Value": "true",
              },
              {
                "Name": "REDIS_DB",
                "Value": "0",
              },
              {
                "Name": "WEB_API_CORS_ALLOW_ORIGINS",
                "Value": "*",
              },
              {
                "Name": "CONSOLE_CORS_ALLOW_ORIGINS",
                "Value": "*",
              },
              {
                "Name": "STORAGE_TYPE",
                "Value": "s3",
              },
              {
                "Name": "S3_BUCKET_NAME",
                "Value": {
                  "Ref": "StorageBucket19DB2FF8",
                },
              },
              {
                "Name": "S3_REGION",
                "Value": "us-west-2",
              },
              {
                "Name": "S3_USE_AWS_MANAGED_IAM",
                "Value": "true",
              },
              {
                "Name": "DB_DATABASE",
                "Value": "main",
              },
              {
                "Name": "VECTOR_STORE",
                "Value": "pgvector",
              },
              {
                "Name": "PGVECTOR_DATABASE",
                "Value": "pgvector",
              },
              {
                "Name": "CODE_EXECUTION_ENDPOINT",
                "Value": "http://localhost:8194",
              },
              {
                "Name": "PLUGIN_DAEMON_URL",
                "Value": "http://localhost:5002",
              },
              {
                "Name": "MARKETPLACE_API_URL",
                "Value": "https://marketplace.dify.ai",
              },
              {
                "Name": "MARKETPLACE_URL",
                "Value": "https://marketplace.dify.ai",
              },
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD-SHELL",
                "curl -f http://localhost:5001/health || exit 1",
              ],
              "Interval": 15,
              "Retries": 10,
              "StartPeriod": 90,
              "Timeout": 5,
            },
            "Image": {
              "Fn::Join": [
                "",
                [
                  "123456789012.dkr.ecr.us-west-2.",
                  {
                    "Ref": "AWS::URLSuffix",
                  },
                  "/custom:dify-api_latest",
                ],
              ],
            },
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "ApiServiceTaskMainLogGroup4A8BF33F",
                },
                "awslogs-region": "us-west-2",
                "awslogs-stream-prefix": "log",
              },
            },
            "Name": "Main",
            "PortMappings": [
              {
                "ContainerPort": 5001,
                "Protocol": "tcp",
              },
            ],
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PORT",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                      },
                      ":port::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGVECTOR_USER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGVECTOR_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGVECTOR_PORT",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                      },
                      ":port::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGVECTOR_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "REDIS_PASSWORD",
                "ValueFrom": {
                  "Ref": "RedisAuthToken9E34F6A5",
                },
              },
              {
                "Name": "CELERY_BROKER_URL",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:us-west-2:123456789012:parameter/",
                      {
                        "Ref": "RedisBrokerUrlA8582E06",
                      },
                    ],
                  ],
                },
              },
              {
                "Name": "SECRET_KEY",
                "ValueFrom": {
                  "Ref": "ApiServiceEncryptionSecretF73F9ECD",
                },
              },
              {
                "Name": "CODE_EXECUTION_API_KEY",
                "ValueFrom": {
                  "Ref": "ApiServiceEncryptionSecretF73F9ECD",
                },
              },
              {
                "Name": "INNER_API_KEY_FOR_PLUGIN",
                "ValueFrom": {
                  "Ref": "ApiServiceEncryptionSecretF73F9ECD",
                },
              },
              {
                "Name": "PLUGIN_DAEMON_KEY",
                "ValueFrom": {
                  "Ref": "ApiServiceEncryptionSecretF73F9ECD",
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "MODE",
                "Value": "worker",
              },
              {
                "Name": "LOG_LEVEL",
                "Value": "ERROR",
              },
              {
                "Name": "DEBUG",
                "Value": "false",
              },
              {
                "Name": "CONSOLE_WEB_URL",
                "Value": {
                  "Fn::Join": [
                    "",
                    [
                      "http://",
                      {
                        "Fn::GetAtt": [
                          "AlbC1372A32",
                          "DNSName",
                        ],
                      },
                    ],
                  ],
                },
              },
              {
                "Name": "CONSOLE_API_URL",
                "Value": {
                  "Fn::Join": [
                    "",
                    [
                      "http://",
                      {
                        "Fn::GetAtt": [
                          "AlbC1372A32",
                          "DNSName",
                        ],
                      },
                    ],
                  ],
                },
              },
              {
                "Name": "SERVICE_API_URL",
                "Value": {
                  "Fn::Join": [
                    "",
                    [
                      "http://",
                      {
                        "Fn::GetAtt": [
                          "AlbC1372A32",
                          "DNSName",
                        ],
                      },
                    ],
                  ],
                },
              },
              {
                "Name": "APP_WEB_URL",
                "Value": {
                  "Fn::Join": [
                    "",
                    [
                      "http://",
                      {
                        "Fn::GetAtt": [
                          "AlbC1372A32",
                          "DNSName",
                        ],
                      },
                    ],
                  ],
                },
              },
              {
                "Name": "MIGRATION_ENABLED",
                "Value": "true",
              },
              {
                "Name": "SQLALCHEMY_POOL_PRE_PING",
                "Value": "True",
              },
              {
                "Name": "REDIS_HOST",
                "Value": {
                  "Fn::GetAtt": [
                    "RedisFF642DF2",
                    "PrimaryEndPoint.Address",
                  ],
                },
              },
              {
                "Name": "REDIS_PORT",
                "Value": "6379",
              },
              {
                "Name": "REDIS_USE_SSL",
                "Value": "true",
              },
              {
                "Name": "REDIS_DB",
                "Value": "0",
              },
              {
                "Name": "STORAGE_TYPE",
                "Value": "s3",
              },
              {
                "Name": "S3_BUCKET_NAME",
                "Value": {
                  "Ref": "StorageBucket19DB2FF8",
                },
              },
              {
                "Name": "S3_REGION",
                "Value": "us-west-2",
              },
              {
                "Name": "DB_DATABASE",
                "Value": "main",
              },
              {
                "Name": "VECTOR_STORE",
                "Value": "pgvector",
              },
              {
                "Name": "PGVECTOR_DATABASE",
                "Value": "pgvector",
              },
              {
                "Name": "PLUGIN_API_URL",
                "Value": "http://localhost:5002",
              },
              {
                "Name": "MARKETPLACE_API_URL",
                "Value": "https://marketplace.dify.ai",
              },
              {
                "Name": "MARKETPLACE_URL",
                "Value": "https://marketplace.dify.ai",
              },
            ],
            "Essential": true,
            "Image": {
              "Fn::Join": [
                "",
                [
                  "123456789012.dkr.ecr.us-west-2.",
                  {
                    "Ref": "AWS::URLSuffix",
                  },
                  "/custom:dify-api_latest",
                ],
              ],
            },
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "ApiServiceTaskWorkerLogGroup48EED12F",
                },
                "awslogs-region": "us-west-2",
                "awslogs-stream-prefix": "log",
              },
            },
            "Name": "Worker",
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PORT",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                      },
                      ":port::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGVECTOR_USER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGVECTOR_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGVECTOR_PORT",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                      },
                      ":port::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGVECTOR_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "REDIS_PASSWORD",
                "ValueFrom": {
                  "Ref": "RedisAuthToken9E34F6A5",
                },
              },
              {
                "Name": "CELERY_BROKER_URL",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:us-west-2:123456789012:parameter/",
                      {
                        "Ref": "RedisBrokerUrlA8582E06",
                      },
                    ],
                  ],
                },
              },
              {
                "Name": "SECRET_KEY",
                "ValueFrom": {
                  "Ref": "ApiServiceEncryptionSecretF73F9ECD",
                },
              },
              {
                "Name": "PLUGIN_DAEMON_KEY",
                "ValueFrom": {
                  "Ref": "ApiServiceEncryptionSecretF73F9ECD",
                },
              },
            ],
          },
          {
            "Essential": false,
            "Image": {
              "Fn::Sub": "123456789012.dkr.ecr.us-west-2.\${AWS::URLSuffix}/cdk-hnb659fds-container-assets-123456789012-us-west-2:8212bb6032c6f45fe8aa3802d732a1c334e09486001a46c78816d50319722a0b",
            },
            "MountPoints": [
              {
                "ContainerPath": "/dependencies",
                "ReadOnly": false,
                "SourceVolume": "sandbox",
              },
            ],
            "Name": "SandboxFileMount",
          },
          {
            "DependsOn": [
              {
                "Condition": "COMPLETE",
                "ContainerName": "SandboxFileMount",
              },
            ],
            "Environment": [
              {
                "Name": "GIN_MODE",
                "Value": "release",
              },
              {
                "Name": "WORKER_TIMEOUT",
                "Value": "15",
              },
              {
                "Name": "ENABLE_NETWORK",
                "Value": "true",
              },
            ],
            "Essential": true,
            "Image": {
              "Fn::Join": [
                "",
                [
                  "123456789012.dkr.ecr.us-west-2.",
                  {
                    "Ref": "AWS::URLSuffix",
                  },
                  "/custom:dify-sandbox_0.2.4",
                ],
              ],
            },
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "ApiServiceTaskSandboxLogGroupDDF292A0",
                },
                "awslogs-region": "us-west-2",
                "awslogs-stream-prefix": "log",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/dependencies",
                "ReadOnly": true,
                "SourceVolume": "sandbox",
              },
            ],
            "Name": "Sandbox",
            "PortMappings": [
              {
                "ContainerPort": 8194,
                "Protocol": "tcp",
              },
            ],
            "Secrets": [
              {
                "Name": "API_KEY",
                "ValueFrom": {
                  "Ref": "ApiServiceEncryptionSecretF73F9ECD",
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "GIN_MODE",
                "Value": "release",
              },
              {
                "Name": "REDIS_HOST",
                "Value": {
                  "Fn::GetAtt": [
                    "RedisFF642DF2",
                    "PrimaryEndPoint.Address",
                  ],
                },
              },
              {
                "Name": "REDIS_PORT",
                "Value": "6379",
              },
              {
                "Name": "REDIS_USE_SSL",
                "Value": "true",
              },
              {
                "Name": "DB_DATABASE",
                "Value": "dify_plugin",
              },
              {
                "Name": "DB_SSL_MODE",
                "Value": "disable",
              },
              {
                "Name": "SERVER_PORT",
                "Value": "5002",
              },
              {
                "Name": "AWS_REGION",
                "Value": "us-west-2",
              },
              {
                "Name": "PLUGIN_STORAGE_TYPE",
                "Value": "aws_s3",
              },
              {
                "Name": "PLUGIN_STORAGE_OSS_BUCKET",
                "Value": {
                  "Ref": "StorageBucket19DB2FF8",
                },
              },
              {
                "Name": "PLUGIN_INSTALLED_PATH",
                "Value": "plugins",
              },
              {
                "Name": "PLUGIN_MAX_EXECUTION_TIMEOUT",
                "Value": "600",
              },
              {
                "Name": "MAX_PLUGIN_PACKAGE_SIZE",
                "Value": "52428800",
              },
              {
                "Name": "MAX_BUNDLE_PACKAGE_SIZE",
                "Value": "52428800",
              },
              {
                "Name": "PLUGIN_REMOTE_INSTALLING_ENABLED",
                "Value": "true",
              },
              {
                "Name": "PLUGIN_REMOTE_INSTALLING_HOST",
                "Value": "localhost",
              },
              {
                "Name": "PLUGIN_REMOTE_INSTALLING_PORT",
                "Value": "5003",
              },
              {
                "Name": "ROUTINE_POOL_SIZE",
                "Value": "10000",
              },
              {
                "Name": "LIFETIME_COLLECTION_HEARTBEAT_INTERVAL",
                "Value": "5",
              },
              {
                "Name": "LIFETIME_COLLECTION_GC_INTERVAL",
                "Value": "60",
              },
              {
                "Name": "LIFETIME_STATE_GC_INTERVAL",
                "Value": "300",
              },
              {
                "Name": "DIFY_INVOCATION_CONNECTION_IDLE_TIMEOUT",
                "Value": "120",
              },
              {
                "Name": "PYTHON_ENV_INIT_TIMEOUT",
                "Value": "120",
              },
              {
                "Name": "DIFY_INNER_API_URL",
                "Value": "http://localhost:5001",
              },
              {
                "Name": "PLUGIN_WORKING_PATH",
                "Value": "/app/storage/cwd",
              },
              {
                "Name": "FORCE_VERIFYING_SIGNATURE",
                "Value": "true",
              },
              {
                "Name": "S3_USE_AWS_MANAGED_IAM",
                "Value": "true",
              },
              {
                "Name": "S3_ENDPOINT",
                "Value": "https://s3.us-west-2.amazonaws.com",
              },
            ],
            "Essential": true,
            "Image": {
              "Fn::Join": [
                "",
                [
                  "123456789012.dkr.ecr.us-west-2.",
                  {
                    "Ref": "AWS::URLSuffix",
                  },
                  "/custom:dify-plugin-daemon_main-local",
                ],
              ],
            },
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "ApiServiceTaskPluginDaemonLogGroupB382B492",
                },
                "awslogs-region": "us-west-2",
                "awslogs-stream-prefix": "log",
              },
            },
            "Name": "PluginDaemon",
            "PortMappings": [
              {
                "ContainerPort": 5002,
                "Protocol": "tcp",
              },
              {
                "ContainerPort": 5003,
                "Protocol": "tcp",
              },
            ],
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PORT",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                      },
                      ":port::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGVECTOR_USER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGVECTOR_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGVECTOR_PORT",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                      },
                      ":port::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGVECTOR_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "REDIS_PASSWORD",
                "ValueFrom": {
                  "Ref": "RedisAuthToken9E34F6A5",
                },
              },
              {
                "Name": "CELERY_BROKER_URL",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:us-west-2:123456789012:parameter/",
                      {
                        "Ref": "RedisBrokerUrlA8582E06",
                      },
                    ],
                  ],
                },
              },
              {
                "Name": "DIFY_INNER_API_KEY",
                "ValueFrom": {
                  "Ref": "ApiServiceEncryptionSecretF73F9ECD",
                },
              },
              {
                "Name": "SERVER_KEY",
                "ValueFrom": {
                  "Ref": "ApiServiceEncryptionSecretF73F9ECD",
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "BEARER_TOKEN",
                "Value": "dummy-key",
              },
              {
                "Name": "BEDROCK_REGION",
                "Value": "us-west-2",
              },
            ],
            "Essential": true,
            "Image": {
              "Fn::Sub": "123456789012.dkr.ecr.us-west-2.\${AWS::URLSuffix}/cdk-hnb659fds-container-assets-123456789012-us-west-2:64ce6f060d671ff40122ebae64f14d89fd2d3eb82237fae0284034b4de27d0d9",
            },
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "ApiServiceTaskExternalKnowledgeBaseAPILogGroupE8D1DD85",
                },
                "awslogs-region": "us-west-2",
                "awslogs-stream-prefix": "log",
              },
            },
            "Name": "ExternalKnowledgeBaseAPI",
            "PortMappings": [
              {
                "ContainerPort": 8000,
                "Protocol": "tcp",
              },
            ],
          },
        ],
        "Cpu": "1024",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "ApiServiceTaskExecutionRoleFE812553",
            "Arn",
          ],
        },
        "Family": "TestStackApiServiceTaskBFA8CBF7",
        "Memory": "2048",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "RuntimePlatform": {
          "CpuArchitecture": "X86_64",
        },
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "ApiServiceTaskTaskRole06F87EBE",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "sandbox",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "ApiServiceTaskExecutionRoleDefaultPolicy38AB6296": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecr:us-west-2:123456789012:repository/custom",
                  ],
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "ApiServiceTaskMainLogGroup4A8BF33F",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "RedisAuthToken9E34F6A5",
              },
            },
            {
              "Action": [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:us-west-2:123456789012:parameter/",
                    {
                      "Ref": "RedisBrokerUrlA8582E06",
                    },
                  ],
                ],
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "ApiServiceEncryptionSecretF73F9ECD",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "ApiServiceTaskWorkerLogGroup48EED12F",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecr:us-west-2:123456789012:repository/cdk-hnb659fds-container-assets-123456789012-us-west-2",
                  ],
                ],
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "ApiServiceTaskSandboxLogGroupDDF292A0",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "ApiServiceTaskPluginDaemonLogGroupB382B492",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "ApiServiceTaskExternalKnowledgeBaseAPILogGroupE8D1DD85",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiServiceTaskExecutionRoleDefaultPolicy38AB6296",
        "Roles": [
          {
            "Ref": "ApiServiceTaskExecutionRoleFE812553",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ApiServiceTaskExecutionRoleFE812553": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiServiceTaskExternalKnowledgeBaseAPILogGroupE8D1DD85": {
      "DeletionPolicy": "Retain",
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiServiceTaskMainLogGroup4A8BF33F": {
      "DeletionPolicy": "Retain",
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiServiceTaskPluginDaemonLogGroupB382B492": {
      "DeletionPolicy": "Retain",
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiServiceTaskSandboxLogGroupDDF292A0": {
      "DeletionPolicy": "Retain",
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiServiceTaskTaskRole06F87EBE": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiServiceTaskTaskRoleDefaultPolicy982AD2DC": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "StorageBucket19DB2FF8",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "StorageBucket19DB2FF8",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "bedrock:InvokeModel",
                "bedrock:InvokeModelWithResponseStream",
                "bedrock:Rerank",
                "bedrock:Retrieve",
                "bedrock:RetrieveAndGenerate",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ssmmessages:CreateControlChannel",
                "ssmmessages:CreateDataChannel",
                "ssmmessages:OpenControlChannel",
                "ssmmessages:OpenDataChannel",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "logs:DescribeLogGroups",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiServiceTaskTaskRoleDefaultPolicy982AD2DC",
        "Roles": [
          {
            "Ref": "ApiServiceTaskTaskRole06F87EBE",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ApiServiceTaskWorkerLogGroup48EED12F": {
      "DeletionPolicy": "Retain",
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ClusterEB0386A7": {
      "Properties": {
        "ClusterSettings": [
          {
            "Name": "containerInsights",
            "Value": "enabled",
          },
        ],
      },
      "Type": "AWS::ECS::Cluster",
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
      "DependsOn": [
        "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-123456789012-us-west-2",
          "S3Key": "faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6.zip",
        },
        "Description": {
          "Fn::Join": [
            "",
            [
              "Lambda function for auto-deleting objects in ",
              {
                "Ref": "AccessLogBucketDA470295",
              },
              " S3 bucket.",
            ],
          ],
        },
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Sub": "arn:\${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "PostgresCluster53E5BDAB": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "CopyTagsToSnapshot": true,
        "DBClusterParameterGroupName": {
          "Ref": "PostgresParameterGroupC3694DF2",
        },
        "DBSubnetGroupName": {
          "Ref": "PostgresClusterSubnets99BD7A61",
        },
        "DatabaseName": "main",
        "EnableHttpEndpoint": true,
        "Engine": "aurora-postgresql",
        "EngineVersion": "15.7",
        "MasterUserPassword": {
          "Fn::Join": [
            "",
            [
              "{{resolve:secretsmanager:",
              {
                "Ref": "PostgresClusterSecretC5EAFDEC",
              },
              ":SecretString:password::}}",
            ],
          ],
        },
        "MasterUsername": {
          "Fn::Join": [
            "",
            [
              "{{resolve:secretsmanager:",
              {
                "Ref": "PostgresClusterSecretC5EAFDEC",
              },
              ":SecretString:username::}}",
            ],
          ],
        },
        "Port": 5432,
        "ServerlessV2ScalingConfiguration": {
          "MaxCapacity": 2,
          "MinCapacity": 0,
        },
        "StorageEncrypted": true,
        "VpcSecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "PostgresClusterSecurityGroup08DE6EE8",
              "GroupId",
            ],
          },
        ],
      },
      "Type": "AWS::RDS::DBCluster",
      "UpdateReplacePolicy": "Delete",
    },
    "PostgresClusterSecretAttachment8DDCF2A8": {
      "Properties": {
        "SecretId": {
          "Ref": "PostgresClusterSecretC5EAFDEC",
        },
        "TargetId": {
          "Ref": "PostgresCluster53E5BDAB",
        },
        "TargetType": "AWS::RDS::DBCluster",
      },
      "Type": "AWS::SecretsManager::SecretTargetAttachment",
    },
    "PostgresClusterSecretC5EAFDEC": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "Description": {
          "Fn::Join": [
            "",
            [
              "Generated by the CDK for stack: ",
              {
                "Ref": "AWS::StackName",
              },
            ],
          ],
        },
        "GenerateSecretString": {
          "ExcludeCharacters": " %+~\`#$&*()|[]{}:;<>?!'/@"\\",
          "GenerateStringKey": "password",
          "PasswordLength": 30,
          "SecretStringTemplate": "{"username":"postgres"}",
        },
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "PostgresClusterSecurityGroup08DE6EE8": {
      "Properties": {
        "GroupDescription": "RDS security group",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "PostgresClusterSecurityGroupfromTestStackApiServiceFargateServiceSecurityGroup7DD0AF44IndirectPort6FBE377A": {
      "Properties": {
        "Description": "from TestStackApiServiceFargateServiceSecurityGroup7DD0AF44:{IndirectPort}",
        "FromPort": {
          "Fn::GetAtt": [
            "PostgresCluster53E5BDAB",
            "Endpoint.Port",
          ],
        },
        "GroupId": {
          "Fn::GetAtt": [
            "PostgresClusterSecurityGroup08DE6EE8",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "ApiServiceFargateServiceSecurityGroupE31C96C6",
            "GroupId",
          ],
        },
        "ToPort": {
          "Fn::GetAtt": [
            "PostgresCluster53E5BDAB",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "PostgresClusterSubnets99BD7A61": {
      "Properties": {
        "DBSubnetGroupDescription": "Subnets for Cluster database",
        "SubnetIds": [
          {
            "Ref": "VpcIsolatedSubnet1SubnetE48C5737",
          },
          {
            "Ref": "VpcIsolatedSubnet2Subnet16364B91",
          },
        ],
      },
      "Type": "AWS::RDS::DBSubnetGroup",
    },
    "PostgresClusterWriterF88DD8CC": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "VpcIsolatedSubnet1RouteTableAssociationD300FCBB",
        "VpcIsolatedSubnet2RouteTableAssociationF7B18CCA",
      ],
      "Properties": {
        "AutoMinorVersionUpgrade": true,
        "DBClusterIdentifier": {
          "Ref": "PostgresCluster53E5BDAB",
        },
        "DBInstanceClass": "db.serverless",
        "Engine": "aurora-postgresql",
        "PromotionTier": 0,
        "PubliclyAccessible": false,
      },
      "Type": "AWS::RDS::DBInstance",
      "UpdateReplacePolicy": "Delete",
    },
    "PostgresParameterGroupC3694DF2": {
      "Properties": {
        "Description": "Cluster parameter group for aurora-postgresql15",
        "Family": "aurora-postgresql15",
        "Parameters": {
          "idle_session_timeout": "60000",
        },
      },
      "Type": "AWS::RDS::DBClusterParameterGroup",
    },
    "PostgresQuery0CustomResourcePolicy41175230": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "rds-data:ExecuteStatement",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds:us-west-2:123456789012:cluster:",
                    {
                      "Ref": "PostgresCluster53E5BDAB",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "PostgresQuery0CustomResourcePolicy41175230",
        "Roles": [
          {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "PostgresQuery0FD53F567": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "PostgresQuery0CustomResourcePolicy41175230",
        "PostgresWaitForHttpEndpointReady6D04AFAC",
      ],
      "Properties": {
        "Create": {
          "Fn::Join": [
            "",
            [
              "{"service":"rds-data","action":"ExecuteStatement","parameters":{"resourceArn":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":rds:us-west-2:123456789012:cluster:",
              {
                "Ref": "PostgresCluster53E5BDAB",
              },
              "","secretArn":"",
              {
                "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
              },
              "","sql":"CREATE DATABASE pgvector;"},"physicalResourceId":{"id":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":rds:us-west-2:123456789012:cluster:",
              {
                "Ref": "PostgresCluster53E5BDAB",
              },
              ""}}",
            ],
          ],
        },
        "InstallLatestAwsSdk": true,
        "ServiceToken": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
            "Arn",
          ],
        },
        "Update": {
          "Fn::Join": [
            "",
            [
              "{"service":"rds-data","action":"ExecuteStatement","parameters":{"resourceArn":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":rds:us-west-2:123456789012:cluster:",
              {
                "Ref": "PostgresCluster53E5BDAB",
              },
              "","secretArn":"",
              {
                "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
              },
              "","sql":"CREATE DATABASE pgvector;"},"physicalResourceId":{"id":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":rds:us-west-2:123456789012:cluster:",
              {
                "Ref": "PostgresCluster53E5BDAB",
              },
              ""}}",
            ],
          ],
        },
      },
      "Type": "Custom::AWS",
      "UpdateReplacePolicy": "Delete",
    },
    "PostgresQuery1B175C979": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "PostgresQuery0FD53F567",
        "PostgresQuery1CustomResourcePolicy1E34BE89",
      ],
      "Properties": {
        "Create": {
          "Fn::Join": [
            "",
            [
              "{"service":"rds-data","action":"ExecuteStatement","parameters":{"resourceArn":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":rds:us-west-2:123456789012:cluster:",
              {
                "Ref": "PostgresCluster53E5BDAB",
              },
              "","secretArn":"",
              {
                "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
              },
              "","database":"pgvector","sql":"CREATE EXTENSION IF NOT EXISTS vector;"},"physicalResourceId":{"id":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":rds:us-west-2:123456789012:cluster:",
              {
                "Ref": "PostgresCluster53E5BDAB",
              },
              ""}}",
            ],
          ],
        },
        "InstallLatestAwsSdk": true,
        "ServiceToken": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
            "Arn",
          ],
        },
        "Update": {
          "Fn::Join": [
            "",
            [
              "{"service":"rds-data","action":"ExecuteStatement","parameters":{"resourceArn":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":rds:us-west-2:123456789012:cluster:",
              {
                "Ref": "PostgresCluster53E5BDAB",
              },
              "","secretArn":"",
              {
                "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
              },
              "","database":"pgvector","sql":"CREATE EXTENSION IF NOT EXISTS vector;"},"physicalResourceId":{"id":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":rds:us-west-2:123456789012:cluster:",
              {
                "Ref": "PostgresCluster53E5BDAB",
              },
              ""}}",
            ],
          ],
        },
      },
      "Type": "Custom::AWS",
      "UpdateReplacePolicy": "Delete",
    },
    "PostgresQuery1CustomResourcePolicy1E34BE89": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "rds-data:ExecuteStatement",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds:us-west-2:123456789012:cluster:",
                    {
                      "Ref": "PostgresCluster53E5BDAB",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "PostgresQuery1CustomResourcePolicy1E34BE89",
        "Roles": [
          {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "PostgresWaitForHttpEndpointReady6D04AFAC": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "PostgresClusterWriterF88DD8CC",
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "TimeSleepCustomResourceHandler494c1b460d2f4e3b9bfd0b2cf10162f981117264",
            "Arn",
          ],
        },
        "createDurationSeconds": 60,
        "destroyDurationSeconds": 0,
      },
      "Type": "Custom::TimeSleep",
      "UpdateReplacePolicy": "Delete",
    },
    "RedisAuthToken9E34F6A5": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "GenerateSecretString": {
          "ExcludePunctuation": true,
          "PasswordLength": 30,
        },
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "RedisBrokerUrlA8582E06": {
      "Properties": {
        "Type": "String",
        "Value": {
          "Fn::Join": [
            "",
            [
              "rediss://:{{resolve:secretsmanager:",
              {
                "Ref": "RedisAuthToken9E34F6A5",
              },
              ":SecretString:::}}@",
              {
                "Fn::GetAtt": [
                  "RedisFF642DF2",
                  "PrimaryEndPoint.Address",
                ],
              },
              ":6379/1",
            ],
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "RedisFF642DF2": {
      "Properties": {
        "AtRestEncryptionEnabled": true,
        "AuthToken": {
          "Fn::Join": [
            "",
            [
              "{{resolve:secretsmanager:",
              {
                "Ref": "RedisAuthToken9E34F6A5",
              },
              ":SecretString:::}}",
            ],
          ],
        },
        "AutomaticFailoverEnabled": true,
        "CacheNodeType": "cache.t4g.micro",
        "CacheParameterGroupName": "default.valkey8",
        "CacheSubnetGroupName": {
          "Ref": "RedisSubnetGroup2387CBFF",
        },
        "Engine": "Valkey",
        "EngineVersion": "8.0",
        "MultiAZEnabled": true,
        "NumNodeGroups": 1,
        "Port": 6379,
        "ReplicasPerNodeGroup": 1,
        "ReplicationGroupDescription": "Dify cache/queue cluster",
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "RedisSecurityGroupC1E9FD21",
              "GroupId",
            ],
          },
        ],
        "TransitEncryptionEnabled": true,
      },
      "Type": "AWS::ElastiCache::ReplicationGroup",
    },
    "RedisSecurityGroupC1E9FD21": {
      "Properties": {
        "GroupDescription": "TestStack/Redis/SecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "RedisSecurityGroupfromTestStackApiServiceFargateServiceSecurityGroup7DD0AF446379F9E0F455": {
      "Properties": {
        "Description": "from TestStackApiServiceFargateServiceSecurityGroup7DD0AF44:6379",
        "FromPort": 6379,
        "GroupId": {
          "Fn::GetAtt": [
            "RedisSecurityGroupC1E9FD21",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "ApiServiceFargateServiceSecurityGroupE31C96C6",
            "GroupId",
          ],
        },
        "ToPort": 6379,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "RedisSubnetGroup2387CBFF": {
      "Properties": {
        "Description": "Dify ElastiCache subnets",
        "SubnetIds": [
          {
            "Ref": "VpcIsolatedSubnet1SubnetE48C5737",
          },
          {
            "Ref": "VpcIsolatedSubnet2Subnet16364B91",
          },
        ],
      },
      "Type": "AWS::ElastiCache::SubnetGroup",
    },
    "StorageBucket19DB2FF8": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "Tags": [
          {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true",
          },
        ],
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "StorageBucketAutoDeleteObjectsCustomResource105C81BD": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "StorageBucketPolicy41A048DB",
      ],
      "Properties": {
        "BucketName": {
          "Ref": "StorageBucket19DB2FF8",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3AutoDeleteObjects",
      "UpdateReplacePolicy": "Delete",
    },
    "StorageBucketPolicy41A048DB": {
      "Properties": {
        "Bucket": {
          "Ref": "StorageBucket19DB2FF8",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "StorageBucket19DB2FF8",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "StorageBucket19DB2FF8",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "s3:PutBucketPolicy",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn",
                  ],
                },
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "StorageBucket19DB2FF8",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "StorageBucket19DB2FF8",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "TimeSleepCustomResourceHandler494c1b460d2f4e3b9bfd0b2cf10162f981117264": {
      "DependsOn": [
        "TimeSleepCustomResourceHandler494c1b460d2f4e3b9bfd0b2cf10162f9ServiceRole47E386BD",
      ],
      "Properties": {
        "Code": {
          "ZipFile": ""use strict";var o=Object.defineProperty;var n=Object.getOwnPropertyDescriptor;var d=Object.getOwnPropertyNames;var p=Object.prototype.hasOwnProperty;var u=(t,e)=>{for(var s in e)o(t,s,{get:e[s],enumerable:!0})},R=(t,e,s,a)=>{if(e&&typeof e=="object"||typeof e=="function")for(let r of d(e))!p.call(t,r)&&r!==s&&o(t,r,{get:()=>e[r],enumerable:!(a=n(e,r))||a.enumerable});return t};var S=t=>R(o({},"__esModule",{value:!0}),t);var l={};u(l,{handler:()=>g});module.exports=S(l);var c=require("timers/promises"),g=async(t,e)=>{try{switch(t.RequestType){case"Create":await(0,c.setTimeout)(t.ResourceProperties.createDurationSeconds*1e3);break;case"Update":break;case"Delete":await(0,c.setTimeout)(t.ResourceProperties.destroyDurationSeconds*1e3);break}await i("SUCCESS",t,e)}catch(s){console.log(s),await i("FAILED",t,e,s.message)}},i=async(t,e,s,a)=>{let r=JSON.stringify({Status:t,Reason:a??"See the details in CloudWatch Log Stream: "+s.logStreamName,PhysicalResourceId:s.logStreamName,StackId:e.StackId,RequestId:e.RequestId,LogicalResourceId:e.LogicalResourceId,NoEcho:!1,Data:{}});await fetch(e.ResponseURL,{method:"PUT",body:r,headers:{"Content-Type":"","Content-Length":r.length.toString()}})};0&&(module.exports={handler});
",
        },
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "TimeSleepCustomResourceHandler494c1b460d2f4e3b9bfd0b2cf10162f9ServiceRole47E386BD",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "TimeSleepCustomResourceHandler494c1b460d2f4e3b9bfd0b2cf10162f9ServiceRole47E386BD": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "Vpc8378EB38": {
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestStack/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "VpcEndpointsS30075381B": {
      "Properties": {
        "RouteTableIds": [
          {
            "Ref": "VpcIsolatedSubnet1RouteTable4771E3E5",
          },
          {
            "Ref": "VpcIsolatedSubnet2RouteTable1D30AF7D",
          },
        ],
        "ServiceName": {
          "Fn::Join": [
            "",
            [
              "com.amazonaws.",
              {
                "Ref": "AWS::Region",
              },
              ".s3",
            ],
          ],
        },
        "VpcEndpointType": "Gateway",
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "VpcEndpointsbedrockagentruntime679D4488": {
      "Properties": {
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "VpcEndpointsbedrockagentruntimeSecurityGroupB7FAD5A2",
              "GroupId",
            ],
          },
        ],
        "ServiceName": "com.amazonaws.us-west-2.bedrock-agent-runtime",
        "SubnetIds": [
          {
            "Ref": "VpcIsolatedSubnet1SubnetE48C5737",
          },
          {
            "Ref": "VpcIsolatedSubnet2Subnet16364B91",
          },
        ],
        "VpcEndpointType": "Interface",
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "VpcEndpointsbedrockagentruntimeSecurityGroupB7FAD5A2": {
      "Properties": {
        "GroupDescription": "TestStack/VpcEndpoints/bedrock-agent-runtime/SecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": {
              "Fn::GetAtt": [
                "Vpc8378EB38",
                "CidrBlock",
              ],
            },
            "Description": {
              "Fn::Join": [
                "",
                [
                  "from ",
                  {
                    "Fn::GetAtt": [
                      "Vpc8378EB38",
                      "CidrBlock",
                    ],
                  },
                  ":443",
                ],
              ],
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "VpcEndpointsbedrockruntimeBF278953": {
      "Properties": {
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "VpcEndpointsbedrockruntimeSecurityGroup1EEA6237",
              "GroupId",
            ],
          },
        ],
        "ServiceName": "com.amazonaws.us-west-2.bedrock-runtime",
        "SubnetIds": [
          {
            "Ref": "VpcIsolatedSubnet1SubnetE48C5737",
          },
          {
            "Ref": "VpcIsolatedSubnet2Subnet16364B91",
          },
        ],
        "VpcEndpointType": "Interface",
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "VpcEndpointsbedrockruntimeSecurityGroup1EEA6237": {
      "Properties": {
        "GroupDescription": "TestStack/VpcEndpoints/bedrock-runtime/SecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": {
              "Fn::GetAtt": [
                "Vpc8378EB38",
                "CidrBlock",
              ],
            },
            "Description": {
              "Fn::Join": [
                "",
                [
                  "from ",
                  {
                    "Fn::GetAtt": [
                      "Vpc8378EB38",
                      "CidrBlock",
                    ],
                  },
                  ":443",
                ],
              ],
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "VpcEndpointsecrapiB6788145": {
      "Properties": {
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "VpcEndpointsecrapiSecurityGroup3B2D9F24",
              "GroupId",
            ],
          },
        ],
        "ServiceName": "com.amazonaws.us-west-2.ecr.api",
        "SubnetIds": [
          {
            "Ref": "VpcIsolatedSubnet1SubnetE48C5737",
          },
          {
            "Ref": "VpcIsolatedSubnet2Subnet16364B91",
          },
        ],
        "VpcEndpointType": "Interface",
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "VpcEndpointsecrapiSecurityGroup3B2D9F24": {
      "Properties": {
        "GroupDescription": "TestStack/VpcEndpoints/ecr.api/SecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": {
              "Fn::GetAtt": [
                "Vpc8378EB38",
                "CidrBlock",
              ],
            },
            "Description": {
              "Fn::Join": [
                "",
                [
                  "from ",
                  {
                    "Fn::GetAtt": [
                      "Vpc8378EB38",
                      "CidrBlock",
                    ],
                  },
                  ":443",
                ],
              ],
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "VpcEndpointsecrdkr0FEDE80B": {
      "Properties": {
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "VpcEndpointsecrdkrSecurityGroup02575FCB",
              "GroupId",
            ],
          },
        ],
        "ServiceName": "com.amazonaws.us-west-2.ecr.dkr",
        "SubnetIds": [
          {
            "Ref": "VpcIsolatedSubnet1SubnetE48C5737",
          },
          {
            "Ref": "VpcIsolatedSubnet2Subnet16364B91",
          },
        ],
        "VpcEndpointType": "Interface",
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "VpcEndpointsecrdkrSecurityGroup02575FCB": {
      "Properties": {
        "GroupDescription": "TestStack/VpcEndpoints/ecr.dkr/SecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": {
              "Fn::GetAtt": [
                "Vpc8378EB38",
                "CidrBlock",
              ],
            },
            "Description": {
              "Fn::Join": [
                "",
                [
                  "from ",
                  {
                    "Fn::GetAtt": [
                      "Vpc8378EB38",
                      "CidrBlock",
                    ],
                  },
                  ":443",
                ],
              ],
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "VpcEndpointslogs9BDB334D": {
      "Properties": {
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "VpcEndpointslogsSecurityGroup6564A2A4",
              "GroupId",
            ],
          },
        ],
        "ServiceName": "com.amazonaws.us-west-2.logs",
        "SubnetIds": [
          {
            "Ref": "VpcIsolatedSubnet1SubnetE48C5737",
          },
          {
            "Ref": "VpcIsolatedSubnet2Subnet16364B91",
          },
        ],
        "VpcEndpointType": "Interface",
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "VpcEndpointslogsSecurityGroup6564A2A4": {
      "Properties": {
        "GroupDescription": "TestStack/VpcEndpoints/logs/SecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": {
              "Fn::GetAtt": [
                "Vpc8378EB38",
                "CidrBlock",
              ],
            },
            "Description": {
              "Fn::Join": [
                "",
                [
                  "from ",
                  {
                    "Fn::GetAtt": [
                      "Vpc8378EB38",
                      "CidrBlock",
                    ],
                  },
                  ":443",
                ],
              ],
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "VpcEndpointssecretsmanager512D13AA": {
      "Properties": {
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "VpcEndpointssecretsmanagerSecurityGroupB551A680",
              "GroupId",
            ],
          },
        ],
        "ServiceName": "com.amazonaws.us-west-2.secretsmanager",
        "SubnetIds": [
          {
            "Ref": "VpcIsolatedSubnet1SubnetE48C5737",
          },
          {
            "Ref": "VpcIsolatedSubnet2Subnet16364B91",
          },
        ],
        "VpcEndpointType": "Interface",
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "VpcEndpointssecretsmanagerSecurityGroupB551A680": {
      "Properties": {
        "GroupDescription": "TestStack/VpcEndpoints/secretsmanager/SecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": {
              "Fn::GetAtt": [
                "Vpc8378EB38",
                "CidrBlock",
              ],
            },
            "Description": {
              "Fn::Join": [
                "",
                [
                  "from ",
                  {
                    "Fn::GetAtt": [
                      "Vpc8378EB38",
                      "CidrBlock",
                    ],
                  },
                  ":443",
                ],
              ],
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "VpcEndpointsssm8AD5C9C0": {
      "Properties": {
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "VpcEndpointsssmSecurityGroup1AE8F8A0",
              "GroupId",
            ],
          },
        ],
        "ServiceName": "com.amazonaws.us-west-2.ssm",
        "SubnetIds": [
          {
            "Ref": "VpcIsolatedSubnet1SubnetE48C5737",
          },
          {
            "Ref": "VpcIsolatedSubnet2Subnet16364B91",
          },
        ],
        "VpcEndpointType": "Interface",
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "VpcEndpointsssmSecurityGroup1AE8F8A0": {
      "Properties": {
        "GroupDescription": "TestStack/VpcEndpoints/ssm/SecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": {
              "Fn::GetAtt": [
                "Vpc8378EB38",
                "CidrBlock",
              ],
            },
            "Description": {
              "Fn::Join": [
                "",
                [
                  "from ",
                  {
                    "Fn::GetAtt": [
                      "Vpc8378EB38",
                      "CidrBlock",
                    ],
                  },
                  ":443",
                ],
              ],
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "VpcEndpointsssmmessages015FA634": {
      "Properties": {
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "VpcEndpointsssmmessagesSecurityGroup74544C6F",
              "GroupId",
            ],
          },
        ],
        "ServiceName": "com.amazonaws.us-west-2.ssmmessages",
        "SubnetIds": [
          {
            "Ref": "VpcIsolatedSubnet1SubnetE48C5737",
          },
          {
            "Ref": "VpcIsolatedSubnet2Subnet16364B91",
          },
        ],
        "VpcEndpointType": "Interface",
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "VpcEndpointsssmmessagesSecurityGroup74544C6F": {
      "Properties": {
        "GroupDescription": "TestStack/VpcEndpoints/ssmmessages/SecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": {
              "Fn::GetAtt": [
                "Vpc8378EB38",
                "CidrBlock",
              ],
            },
            "Description": {
              "Fn::Join": [
                "",
                [
                  "from ",
                  {
                    "Fn::GetAtt": [
                      "Vpc8378EB38",
                      "CidrBlock",
                    ],
                  },
                  ":443",
                ],
              ],
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "VpcIsolatedSubnet1RouteTable4771E3E5": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestStack/Vpc/IsolatedSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcIsolatedSubnet1RouteTableAssociationD300FCBB": {
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcIsolatedSubnet1RouteTable4771E3E5",
        },
        "SubnetId": {
          "Ref": "VpcIsolatedSubnet1SubnetE48C5737",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcIsolatedSubnet1SubnetE48C5737": {
      "Properties": {
        "AvailabilityZone": "dummy1a",
        "CidrBlock": "10.0.0.0/17",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Isolated",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Isolated",
          },
          {
            "Key": "Name",
            "Value": "TestStack/Vpc/IsolatedSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcIsolatedSubnet2RouteTable1D30AF7D": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestStack/Vpc/IsolatedSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcIsolatedSubnet2RouteTableAssociationF7B18CCA": {
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcIsolatedSubnet2RouteTable1D30AF7D",
        },
        "SubnetId": {
          "Ref": "VpcIsolatedSubnet2Subnet16364B91",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcIsolatedSubnet2Subnet16364B91": {
      "Properties": {
        "AvailabilityZone": "dummy1b",
        "CidrBlock": "10.0.128.0/17",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Isolated",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Isolated",
          },
          {
            "Key": "Name",
            "Value": "TestStack/Vpc/IsolatedSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "WebServiceFargateService5BB9529D": {
      "DependsOn": [
        "AlbListenerWeb0RuleE10BEE0F",
        "WebServiceTaskTaskRoleDefaultPolicyC2E32007",
        "WebServiceTaskTaskRole22AA8FAB",
      ],
      "Properties": {
        "CapacityProviderStrategy": [
          {
            "CapacityProvider": "FARGATE",
            "Weight": 1,
          },
          {
            "CapacityProvider": "FARGATE_SPOT",
            "Weight": 0,
          },
        ],
        "Cluster": {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": {
          "Alarms": {
            "AlarmNames": [],
            "Enable": false,
            "Rollback": false,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 100,
        },
        "EnableECSManagedTags": false,
        "EnableExecuteCommand": true,
        "HealthCheckGracePeriodSeconds": 60,
        "LoadBalancers": [
          {
            "ContainerName": "Main",
            "ContainerPort": 3000,
            "TargetGroupArn": {
              "Ref": "AlbWebTargetGroupC65B2BDF",
            },
          },
        ],
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": [
              {
                "Fn::GetAtt": [
                  "WebServiceFargateServiceSecurityGroup60FE78D6",
                  "GroupId",
                ],
              },
            ],
            "Subnets": [
              {
                "Ref": "VpcIsolatedSubnet1SubnetE48C5737",
              },
              {
                "Ref": "VpcIsolatedSubnet2Subnet16364B91",
              },
            ],
          },
        },
        "TaskDefinition": {
          "Ref": "WebServiceTaskF9926E9D",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "WebServiceFargateServiceSecurityGroup60FE78D6": {
      "DependsOn": [
        "WebServiceTaskTaskRoleDefaultPolicyC2E32007",
        "WebServiceTaskTaskRole22AA8FAB",
      ],
      "Properties": {
        "GroupDescription": "TestStack/WebService/FargateService/SecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "WebServiceFargateServiceSecurityGroupfromTestStackAlbSecurityGroup8A47F1DC30009EE54A2D": {
      "DependsOn": [
        "WebServiceTaskTaskRoleDefaultPolicyC2E32007",
        "WebServiceTaskTaskRole22AA8FAB",
      ],
      "Properties": {
        "Description": "Load balancer to target",
        "FromPort": 3000,
        "GroupId": {
          "Fn::GetAtt": [
            "WebServiceFargateServiceSecurityGroup60FE78D6",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "AlbSecurityGroup433229ED",
            "GroupId",
          ],
        },
        "ToPort": 3000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "WebServiceTaskExecutionRole4406CA16": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "WebServiceTaskExecutionRoleDefaultPolicyA297AC39": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecr:us-west-2:123456789012:repository/custom",
                  ],
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "WebServiceTaskMainLogGroup38DB76FC",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "WebServiceTaskExecutionRoleDefaultPolicyA297AC39",
        "Roles": [
          {
            "Ref": "WebServiceTaskExecutionRole4406CA16",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "WebServiceTaskF9926E9D": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Environment": [
              {
                "Name": "LOG_LEVEL",
                "Value": "ERROR",
              },
              {
                "Name": "DEBUG",
                "Value": "false",
              },
              {
                "Name": "CONSOLE_API_URL",
                "Value": {
                  "Fn::Join": [
                    "",
                    [
                      "http://",
                      {
                        "Fn::GetAtt": [
                          "AlbC1372A32",
                          "DNSName",
                        ],
                      },
                    ],
                  ],
                },
              },
              {
                "Name": "APP_API_URL",
                "Value": {
                  "Fn::Join": [
                    "",
                    [
                      "http://",
                      {
                        "Fn::GetAtt": [
                          "AlbC1372A32",
                          "DNSName",
                        ],
                      },
                    ],
                  ],
                },
              },
              {
                "Name": "HOSTNAME",
                "Value": "0.0.0.0",
              },
              {
                "Name": "PORT",
                "Value": "3000",
              },
              {
                "Name": "MARKETPLACE_API_URL",
                "Value": "https://marketplace.dify.ai",
              },
              {
                "Name": "MARKETPLACE_URL",
                "Value": "https://marketplace.dify.ai",
              },
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD-SHELL",
                "wget --no-verbose --tries=1 --spider http://localhost:3000/ || exit 1",
              ],
              "Interval": 15,
              "Retries": 3,
              "StartPeriod": 30,
              "Timeout": 5,
            },
            "Image": {
              "Fn::Join": [
                "",
                [
                  "123456789012.dkr.ecr.us-west-2.",
                  {
                    "Ref": "AWS::URLSuffix",
                  },
                  "/custom:dify-web_latest",
                ],
              ],
            },
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "WebServiceTaskMainLogGroup38DB76FC",
                },
                "awslogs-region": "us-west-2",
                "awslogs-stream-prefix": "log",
              },
            },
            "Name": "Main",
            "PortMappings": [
              {
                "ContainerPort": 3000,
                "Protocol": "tcp",
              },
            ],
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "WebServiceTaskExecutionRole4406CA16",
            "Arn",
          ],
        },
        "Family": "TestStackWebServiceTaskBC1EE4DB",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "RuntimePlatform": {
          "CpuArchitecture": "X86_64",
        },
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "WebServiceTaskTaskRole22AA8FAB",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "WebServiceTaskMainLogGroup38DB76FC": {
      "DeletionPolicy": "Retain",
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "WebServiceTaskTaskRole22AA8FAB": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "WebServiceTaskTaskRoleDefaultPolicyC2E32007": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ssmmessages:CreateControlChannel",
                "ssmmessages:CreateDataChannel",
                "ssmmessages:OpenControlChannel",
                "ssmmessages:OpenDataChannel",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "logs:DescribeLogGroups",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "WebServiceTaskTaskRoleDefaultPolicyC2E32007",
        "Roles": [
          {
            "Ref": "WebServiceTaskTaskRole22AA8FAB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
